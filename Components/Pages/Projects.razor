@page "/projects"
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<div class="d-flex justify-space-between align-center mb-4">
    <MudText Typo="Typo.h3">Projects</MudText>
    <div class="d-flex gap-2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large">
            Overview all projects
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large">
            MANNING
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Add"
                   Size="Size.Large" OnClick="@(() => OpenDialog(null))">
            Add Project
        </MudButton>
    </div>
</div>

<MudTable T="Project" Items="@projects" Dense="true" Hover="true" Bordered="true" Striped="true">
    <HeaderContent>
        <MudTh>EC Number</MudTh>
        <MudTh>Project Name</MudTh>
        <MudTh>Engineer</MudTh>
        <MudTh>Supplier</MudTh>
        <MudTh>R&M Responsible</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Dates</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="EC Number">@context.ECNumber</MudTd>
        <MudTd DataLabel="Project Name">@context.ProjectName</MudTd>
        <MudTd DataLabel="Engineer">@($"{context.Engineer?.FirstName} {context.Engineer?.LastName}")</MudTd>
        <MudTd DataLabel="Supplier">@context.Supplier?.Name</MudTd>
        <MudTd DataLabel="R&M Responsible">@($"{context.RMResponsible?.FirstName} {context.RMResponsible?.LastName}")</MudTd>
        <MudTd DataLabel="Type">
            <MudChip T="string" Color="@GetProjectTypeColor(context.ProjectType)" Size="Size.Small">
                @context.ProjectType?.Name
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Dates">
            <MudStack>
                <MudText Typo="Typo.caption">Start: @context.StartDate?.ToShortDateString()</MudText>
                <MudText Typo="Typo.caption">Install: @(context.Installation?.ToShortDateString() ?? "N/A")</MudText>
                <MudText Typo="Typo.caption">SOP: @(context.SOP?.ToShortDateString() ?? "N/A")</MudText>
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudTooltip Text="Edit">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Error"
                               OnClick="@(() => OpenDialog(context))" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                               OnClick="@(() => DeleteProject(context))" />
            </MudTooltip>
            <MudTooltip Text="Power BI">
                <MudIconButton Color="Color.Info" Href="@context.PowerBI_URL" Target="_blank">
                    <MudIcon Size="Size.Small">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <!-- SVG path data -->
                        </svg>
                    </MudIcon>
                </MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Details">
                <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Success"
                               OnClick="@(() => NavigateToDetails(context.Id))" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<Project> projects = new();
    private List<ProjectType> projectTypes = new();
    private readonly DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
        await LoadProjectTypes();
    }

    private async Task LoadProjects()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        projects = await context.Projects
            .Include(p => p.Engineer)
            .Include(p => p.RMResponsible)
            .Include(p => p.Supplier)
            .Include(p => p.ProjectPhase)
            .Include(p => p.ProjectType)
            .ToListAsync();
    }

    private async Task LoadProjectTypes()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        projectTypes = await context.ProjectTypes.ToListAsync();
    }

    private Color GetProjectTypeColor(ProjectType type)
    {
        if (type != null && !string.IsNullOrEmpty(type.Color))
        {
            return Enum.TryParse<Color>(type.Color, out var color) ? color : Color.Default;
        }
        return Color.Default;
    }

    private async Task OpenDialog(Project project)
    {
        var parameters = new DialogParameters();
        if (project != null)
            parameters.Add("Project", project);

        var dialog = DialogService.Show<ProjectDialog>(
            project == null ? "Add Project" : "Edit Project", 
            parameters, 
            dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProjects();
            Snackbar.Add("Project has been saved", Severity.Success);
        }
    }

    private async Task DeleteProject(Project project)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this project?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            using var context = await DbFactory.CreateDbContextAsync();
            context.Projects.Remove(project);
            await context.SaveChangesAsync();
            await LoadProjects();
            Snackbar.Add("Project has been deleted", Severity.Success);
        }
    }

    private void NavigateToDetails(int projectId)
    {
        NavigationManager.NavigateTo($"/project-details/{projectId}");
    }
}
