@page "/employees"

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h3" Class="mb-4">Employees</MudText>

<MudButton Color="Color.Primary" OnClick="@(() => OpenDialog(null))">Add Employee</MudButton>

<MudTable T="Employee" Items="@employees" Dense="true" Hover="true" Bordered="true" Striped="true">
    <HeaderContent>
        <MudTh>Photo</MudTh>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Company</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Photo">
            @if (context.PhotoData != null && context.PhotoData.Length > 0)
            {
                <MudImage Src="@($"data:image/png;base64,{Convert.ToBase64String(context.PhotoData)}")" 
                         Width="50" 
                         Height="50" 
                         ObjectFit="ObjectFit.Cover"
                         Class="rounded-circle" />
            }
            else
            {
                <MudAvatar Color="Color.Secondary">@(context.FirstName.FirstOrDefault())@(context.LastName.FirstOrDefault())</MudAvatar>
            }
        </MudTd>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Position">@context.Position</MudTd>
        <MudTd DataLabel="Type">
            <MudChip T="string" Color="@(context.IsInternal ? Color.Success : Color.Primary)" Size="Size.Small">
                @(context.IsInternal ? "Internal" : "External")
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Company">
            @(context.Company?.Name ?? (context.IsInternal ? "Internal Employee" : "-"))
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Color="Color.Primary" OnClick="@(() => OpenDialog(context))">Edit</MudButton>
            <MudButton Color="Color.Error" OnClick="@(() => DeleteEmployee(context))">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<Employee> employees = new();
    private readonly DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        employees = await context.Employees
            .Include(e => e.Company)
            .ToListAsync();
    }

    private async Task OpenDialog(Employee employee)
    {
        var parameters = new DialogParameters();
        if (employee != null)
            parameters.Add("Employee", employee);

        var dialog = DialogService.Show<EmployeeDialog>(
            employee == null ? "Add Employee" : "Edit Employee", 
            parameters, 
            dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadEmployees();
            Snackbar.Add("Employee has been saved", Severity.Success);
        }
    }

    private async Task DeleteEmployee(Employee employee)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this employee?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            using var context = await DbFactory.CreateDbContextAsync();
            context.Employees.Remove(employee);
            await context.SaveChangesAsync();
            await LoadEmployees();
            Snackbar.Add("Employee has been deleted", Severity.Success);
        }
    }
}
