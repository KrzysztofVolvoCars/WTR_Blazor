@page "/tooltree/{ProjectId:int}"
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>@HeaderTitle</PageTitle>

<MudContainer Fixed="true" Class="mt-4">
    @if (project != null)
    {
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h4">@HeaderTitle</MudText>
                    <div>
                        <MudIconButton Icon="@Icons.Material.Filled.History" Color="Color.Primary" OnClick="ShowFileHistory" />
                        <MudButton OnClick="GoBack" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Default">
                            Back to Project
                        </MudButton>
                    </div>
                </div>
            </MudItem>
        </MudGrid>

        <MudPaper Elevation="3" Class="mt-4 pa-4">
            <MudText Typo="Typo.body1" Class="text-center">
                A list of all machines used in a station. Can be presented as a separate list (by station, or line).
            </MudText>
            <MudDivider Class="my-3" />
            <MudGrid>
                <MudItem xs="4" Class="d-flex justify-center">
                    <MudButton @onclick="DownloadExcelFile" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download">
                        Download Template
                    </MudButton>
                </MudItem>
                <MudItem xs="4" Class="d-flex justify-center">
                    <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Upload" OnClick="TriggerFileUpload">
                        Upload File
                    </MudButton>
                    <InputFile OnChange="HandleFileSelected" class="d-none" @ref="fileInput" />
                </MudItem>
                <MudItem xs="4" Class="d-flex justify-center">
                    <MudButton Color="Color.Success" OnClick="SaveData" Disabled="@(!tempTooltreeData.Any())">
                        Save Data
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

        @if (tempTooltreeData.Any())
        {
            <MudPaper Elevation="3" Class="mt-4 pa-4">
                <MudDataGrid Items="@tempTooltreeData" Dense="true" Hover="true" Bordered="true" Striped="true">
                    <Columns>
                        <PropertyColumn Property="x => x.PLCStationEquipment" Title="PLC Station Equipment" />
                        <PropertyColumn Property="x => x.MachineNumber" Title="Machine Number" />
                        <PropertyColumn Property="x => x.PLC" Title="PLC" />
                        <PropertyColumn Property="x => x.Station" Title="Station" />
                        <PropertyColumn Property="x => x.AssetCode" Title="Asset Code" />
                        <PropertyColumn Property="x => x.ToolNumber" Title="Tool Number" />
                        <TemplateColumn Title="Type">
                            <CellTemplate>
                                <MudTooltip Text="@(context.Item.Type?.Description ?? "No description")">
                                    <MudText>@(context.Item.Type?.Code ?? "N/A")</MudText>
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Description" Title="Description" />
                        <PropertyColumn Property="x => x.AssetNumber" Title="Asset Number" />
                        <PropertyColumn Property="x => x.CommentLinebuilder" Title="Comment Linebuilder" />
                        <PropertyColumn Property="x => x.CommentVolvo" Title="Comment Volvo" />
                    </Columns>
                </MudDataGrid>
            </MudPaper>
        }
    }
</MudContainer>

<MudOverlay Visible="@_isProcessing" DarkBackground="true" Absolute="false" ZIndex="9">
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
</MudOverlay>

@code {
    [Parameter] public int ProjectId { get; set; }
    private string HeaderTitle { get; set; }
    private Project project;
    private InputFile fileInput;
    private bool _isProcessing;
    private List<TooltreeData> tempTooltreeData = new List<TooltreeData>();
    private byte[] uploadedFileData;
    private string uploadedFileName;

    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
    }

    private async Task LoadProject()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        project = await context.Projects
            .Select(p => new Project
                {
                    Id = p.Id,
                    ECNumber = p.ECNumber,
                    ProjectName = p.ProjectName,
                    Supplier = new Company { Name = p.Supplier.Name }
                })
            .FirstOrDefaultAsync(p => p.Id == ProjectId);

        if (project == null)
        {
            HeaderTitle = "Project not found";
            Snackbar.Add("Project not found", Severity.Error);
            NavigationManager.NavigateTo("/projects");
            return;
        }

        HeaderTitle = $"{project.ECNumber} - {project.ProjectName} - ToolTree";
    }

    private void GoBack() => NavigationManager.NavigateTo($"/project-details/{ProjectId}");

    public async Task DownloadExcelFile()
    {
        _isProcessing = true;
        StateHasChanged();
        try
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Excels", "Tooltree.xlsm");
            if (!File.Exists(filePath))
            {
                Snackbar.Add("Template file not found", Severity.Error);
                return;
            }

            await using var stream = new MemoryStream();
            using (var workbook = new XLWorkbook(filePath))
            {
                var worksheet = workbook.Worksheets.FirstOrDefault();
                if (worksheet != null)
                {
                    worksheet.AutoFilter?.Clear();
                    worksheet.Cell("C2").Value = project.Supplier.Name;
                    worksheet.Cell("C4").Value = $"{project.ECNumber}-{project.ProjectName}";

                    var saveOptions = new SaveOptions
                    {
                        ValidatePackage = false,
                        EvaluateFormulasBeforeSaving = false,
                        GenerateCalculationChain = false
                    };
                    workbook.SaveAs(stream, saveOptions);
                }
            }

            stream.Position = 0;
            var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"Tooltree-{project.ECNumber}-{project.ProjectName}.xlsm", streamRef);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file: {ex}");
            Snackbar.Add("Error downloading file", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task TriggerFileUpload() => await JS.InvokeVoidAsync("click", fileInput.Element);

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null)
            {
                Snackbar.Add("No file selected", Severity.Warning);
                return;
            }

            var extension = Path.GetExtension(file.Name).ToLower();
            if (extension != ".xlsx" && extension != ".xlsm")
            {
                Snackbar.Add("Please select an Excel file (.xlsx or .xlsm)", Severity.Warning);
                return;
            }

            if (file.Size > 10 * 1024 * 1024)
            {
                Snackbar.Add("File is too large. Maximum size is 10MB", Severity.Warning);
                return;
            }

            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            uploadedFileData = memoryStream.ToArray();
            uploadedFileName = file.Name;

            await ProcessExcelFile(memoryStream);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex}");
            Snackbar.Add("Error uploading file", Severity.Error);
        }
    }

    private async Task ProcessExcelFile(MemoryStream stream)
    {
        _isProcessing = true;
        StateHasChanged();
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var tooltreeTypes = await context.TooltreeTypes.ToListAsync();

            using var workbook = new XLWorkbook(stream);
            var worksheet = workbook.Worksheets.FirstOrDefault() ?? throw new InvalidOperationException("No worksheet found in the Excel file.");

            var lastRow = worksheet.LastRowUsed().RowNumber();
            var range = worksheet.Range("B7:L" + lastRow);
            var table = range.AsTable();

            tempTooltreeData.Clear();
            foreach (var row in table.DataRange.Rows().Where(r => !string.IsNullOrEmpty(r.Cell(3).Value.ToString())))
            {
                var typeCode = row.Cell(7).Value.ToString();
                var tooltreeType = tooltreeTypes.FirstOrDefault(t => t.Code == typeCode);

                var tooltreeData = new TooltreeData
                    {
                        PLCStationEquipment = row.Cell(1).Value.ToString(),
                        MachineNumber = row.Cell(2).Value.ToString(),
                        PLC = row.Cell(3).Value.ToString(),
                        Station = row.Cell(4).Value.ToString(),
                        AssetCode = row.Cell(5).Value.ToString(),
                        ToolNumber = row.Cell(6).Value.ToString(),
                        TypeId = tooltreeType?.Id ?? 0,
                        Type = tooltreeType,
                        Description = row.Cell(8).Value.ToString(),
                        AssetNumber = row.Cell(9).Value.ToString(),
                        CommentLinebuilder = row.Cell(10).Value.ToString(),
                        CommentVolvo = row.Cell(11).Value.ToString()
                    };
                tempTooltreeData.Add(tooltreeData);
            }

            Snackbar.Add("File processed successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing Excel file: {ex}");
            Snackbar.Add("Error processing Excel file", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }



    private async Task SaveData()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.ShowMessageBox(
            "Confirm",
            "This action will delete all existing data for this project. Are you sure you want to proceed?",
            yesText: "Yes", cancelText: "No", options: options);

        if (result == true)
        {
            _isProcessing = true;
            StateHasChanged();

            try
            {
                using (var context = await DbFactory.CreateDbContextAsync())
                {
                    // Load project with all necessary relationships
                    var project = await context.Projects
                        .Include(p => p.Tooltree)
                            .ThenInclude(t => t.TooltreeData)
                                .ThenInclude(td => td.Type)
                        .FirstOrDefaultAsync(p => p.Id == ProjectId);

                    if (project == null)
                    {
                        Snackbar.Add("Project not found", Severity.Error);
                        return;
                    }

                    // Create Tooltree if it doesn't exist
                    if (project.Tooltree == null)
                    {
                        project.Tooltree = new Tooltree
                            {
                                ProjectId = project.Id,
                                Project = project
                            };
                        context.Tooltrees.Add(project.Tooltree);
                    }

                    // Remove existing TooltreeData
                    if (project.Tooltree.TooltreeData.Any())
                    {
                        context.TooltreeDatas.RemoveRange(project.Tooltree.TooltreeData);
                    }

                    // Add new TooltreeData
                    foreach (var data in tempTooltreeData)
                    {
                        // Attach Type if it exists
                        if (data.TypeId > 0)
                        {
                            data.Type = await context.TooltreeTypes.FindAsync(data.TypeId);
                        }

                        data.TooltreeId = project.Tooltree.Id;
                        data.Tooltree = project.Tooltree;
                        context.TooltreeDatas.Add(data);
                    }

                    await context.SaveChangesAsync();
                    Snackbar.Add("Data saved successfully", Severity.Success);

                    // Clear temporary data
                    
                    uploadedFileData = null;
                    uploadedFileName = null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving data: {ex}");
                Snackbar.Add("Error saving data", Severity.Error);
            }
            finally
            {
                _isProcessing = false;
                StateHasChanged();
            }
        }
    }





    private async Task ShowFileHistory()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId);

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<FileHistoryDialog>("File History", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Możesz tutaj obsłużyć wynik dialogu, jeśli jest to potrzebne
        }
    }

}
