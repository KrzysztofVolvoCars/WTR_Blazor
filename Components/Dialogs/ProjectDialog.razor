@using WTR_Blazor.Models.Tooltree
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<MudDialog>
    <DialogContent>
        <MudForm Model="@Project" @ref="form" Validation="@(ProjectValidator.ValidateValue)">
            <MudPaper Class="pa-4" Elevation="0">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="Project.ECNumber"
                                      Label="EC Number"
                                      For="@(() => Project.ECNumber)"
                                      Immediate="true"
                                      HelperText="Required field"
                                      Counter="100" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="Project.ProjectName"
                                      Label="Project Name"
                                      For="@(() => Project.ProjectName)"
                                      Immediate="true"
                                      HelperText="Required field"
                                      Counter="200" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="Project.PowerBI_URL"
                                      Label="PowerBI URL"
                                      For="@(() => Project.PowerBI_URL)"
                                      Immediate="true"
                                      HelperText="Optional - must be a valid URL"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Custom.Brands.MicrosoftAzure"
                                      Counter="500" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="int?" @bind-Value="Project.EngineerId"
                                   Label="Engineer"
                                   For="@(() => Project.EngineerId)">
                            <MudSelectItem T="int?" Value="null">None</MudSelectItem>
                            @foreach (var engineer in engineers)
                            {
                                <MudSelectItem T="int?" Value="@engineer.Id">@($"{engineer.FirstName} {engineer.LastName}")</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="int?" @bind-Value="Project.SupplierId"
                                   Label="Supplier"
                                   For="@(() => Project.SupplierId)">
                            <MudSelectItem T="int?" Value="null">None</MudSelectItem>
                            @foreach (var company in companies)
                            {
                                <MudSelectItem T="int?" Value="@company.Id">@company.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="int?" @bind-Value="Project.RMResponsibleId"
                                   Label="R&M Responsible"
                                   For="@(() => Project.RMResponsibleId)">
                            <MudSelectItem T="int?" Value="null">None</MudSelectItem>
                            @foreach (var responsible in rmResponsibles)
                            {
                                <MudSelectItem T="int?" Value="@responsible.Id">@($"{responsible.FirstName} {responsible.LastName}")</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                
<MudItem xs="12" Class="my-4">
    
        <MudText Typo="Typo.subtitle1" Class="mb-2">Project Type</MudText>
        <MudRadioGroup T="int?" @bind-Value="Project.ProjectTypeId" For="@(() => Project.ProjectTypeId)">
            @foreach (var type in projectTypes.OrderBy(pt => pt.Order))
            {
                <div class="d-flex align-center mb-2">
                    <MudRadio Class="me-8" T="int?" Value="@type.Id" Color="@GetProjectTypeColor(type)" Dense="true">@type.Name</MudRadio>
                </div>
            }
        </MudRadioGroup>
    
</MudItem>


                    <MudItem xs="12" sm="4">
                        <MudDatePicker @bind-Date="Project.StartDate"
                                       Label="Start Date"
                                       For="@(() => Project.StartDate)" />
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudDatePicker @bind-Date="Project.Installation"
                                       Label="Installation"
                                       For="@(() => Project.Installation)" />
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudDatePicker @bind-Date="Project.SOP"
                                       Label="SOP"
                                       For="@(() => Project.SOP)" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Project Project { get; set; } = new();
    private List<Employee> engineers = new();
    private List<Employee> rmResponsibles = new();
    private List<Company> companies = new();
    private MudForm form;
    private ProjectValidator ProjectValidator = new();
    private List<ProjectType> projectTypes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        // Wczytywanie danych słownikowych
        projectTypes = await context.ProjectTypes
            .Where(pt => pt.IsActive)
            .OrderBy(pt => pt.Order)
            .ToListAsync();

        engineers = await context.Employees
            .Where(e => e.IsActive)
            .OrderBy(e => e.LastName)
            .ThenBy(e => e.FirstName)
            .ToListAsync();

        rmResponsibles = await context.Employees
            .Where(e => e.IsActive)
            .OrderBy(e => e.LastName)
            .ThenBy(e => e.FirstName)
            .ToListAsync();

        companies = await context.Companies
            .Where(c => c.IsActive)
            .OrderBy(c => c.Name)
            .ToListAsync();

        // Jeśli to edycja istniejącego projektu, wczytaj pełne dane projektu
        if (Project.Id != 0)
        {
            var existingProject = await context.Projects
                .Include(p => p.Tooltree)
                .Include(p => p.Engineer)
                .Include(p => p.Supplier)
                .Include(p => p.RMResponsible)
                .Include(p => p.ProjectType)
                .FirstOrDefaultAsync(p => p.Id == Project.Id);

            if (existingProject != null)
            {
                Project = existingProject;
            }
        }
    }


    private Color GetProjectTypeColor(ProjectType type)
    {
        return Enum.TryParse<Color>(type.Color, out var color) ? color : Color.Default;
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            using var context = await DbFactory.CreateDbContextAsync();

            if (Project.Id == 0) // Nowy projekt
            {
                // Najpierw dodajemy projekt do kontekstu
                context.Projects.Add(Project);
                await context.SaveChangesAsync(); // Zapisujemy, aby otrzymać Id projektu

                // Tworzymy Tooltree z prawidłowym powiązaniem
                var tooltree = new Tooltree
                    {
                        ProjectId = Project.Id,
                        IsDone = false,
                        TooltreeData = new List<TooltreeData>(),
                        TooltreeFiles = new List<TooltreeFile>()
                    };

                // Dodajemy Tooltree do kontekstu
                context.Tooltrees.Add(tooltree);
                await context.SaveChangesAsync();

                // Aktualizujemy projekt o TooltreeId
                Project.TooltreeId = tooltree.Id;
                context.Projects.Update(Project);
                await context.SaveChangesAsync();
            }
            else // Aktualizacja istniejącego projektu
            {
                // Sprawdzamy czy projekt ma już Tooltree
                var existingProject = await context.Projects
                    .Include(p => p.Tooltree)
                    .FirstOrDefaultAsync(p => p.Id == Project.Id);

                if (existingProject != null)
                {
                    if (existingProject.Tooltree == null)
                    {
                        // Jeśli nie ma Tooltree, tworzymy nowy
                        var tooltree = new Tooltree
                            {
                                ProjectId = Project.Id,
                                IsDone = false,
                                TooltreeData = new List<TooltreeData>(),
                                TooltreeFiles = new List<TooltreeFile>()
                            };

                        context.Tooltrees.Add(tooltree);
                        await context.SaveChangesAsync();

                        Project.TooltreeId = tooltree.Id;
                    }
                    else
                    {
                        // Jeśli Tooltree istnieje, zachowujemy jego Id
                        Project.TooltreeId = existingProject.TooltreeId;
                    }
                }

                // Aktualizujemy projekt
                context.Entry(existingProject).CurrentValues.SetValues(Project);
                await context.SaveChangesAsync();
            }

            MudDialog.Close(DialogResult.Ok(true));
        }
    }


    private void Cancel() => MudDialog.Cancel();
}
