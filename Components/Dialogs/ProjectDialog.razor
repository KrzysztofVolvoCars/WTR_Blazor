@using WTR_Blazor.Models.TooltreeModels
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudOverlay Visible="@isProcessing" DarkBackground="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudOverlay>

        <MudForm Model="@Project" @ref="form" Validation="@(ProjectValidator.ValidateValue)">
            <MudPaper Class="pa-4" Elevation="0">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="Project.EcNumber"
                        Label="EC Number"
                        For="@(() => Project.EcNumber)"
                        Required="true"
                        RequiredError="EC Number is required"
                        Immediate="true"
                        Counter="50" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="Project.ProjectName"
                        Label="Project Name"
                        For="@(() => Project.ProjectName)"
                        Required="true"
                        RequiredError="Project Name is required"
                        Immediate="true"
                        Counter="100" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="Project.PowerBiUrl"
                        Label="PowerBI URL"
                        For="@(() => Project.PowerBiUrl)"
                        Immediate="true"
                        HelperText="Optional - must be a valid URL"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Custom.Brands.MicrosoftAzure"
                        Counter="500" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="int" @bind-Value="Project.EngineerId"
                        Label="Engineer"
                        Required="true"
                        RequiredError="Engineer is required"
                        For="@(() => Project.EngineerId)">
                            @foreach (var engineer in engineers)
                            {
                                <MudSelectItem T="int" Value="@engineer.Id">@($"{engineer.FirstName} {engineer.LastName}")</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="int?" @bind-Value="Project.SupplierId"
                        Label="Supplier"
                        For="@(() => Project.SupplierId)">
                            @foreach (var company in companies)
                            {
                                <MudSelectItem T="int?" Value="@company.Id">@company.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="int" @bind-Value="Project.RmTechnikerId"
                        Label="R&M Responsible"
                        Required="true"
                        RequiredError="R&M Responsible is required"
                        For="@(() => Project.RmTechnikerId)">
                            @foreach (var responsible in rmResponsibles)
                            {
                                <MudSelectItem T="int" Value="@responsible.Id">@($"{responsible.FirstName} {responsible.LastName}")</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" Class="my-4">
                        <MudText Typo="Typo.subtitle1" Class="mb-2">Project Type</MudText>
                        <MudRadioGroup T="int?" @bind-Value="Project.ProjectTypeId"
                        Required="true"
                        RequiredError="Project Type is required"
                        For="@(() => Project.ProjectTypeId)">
                            @foreach (var type in projectTypes.OrderBy(pt => pt.Order))
                            {
                                <div class="d-flex align-center mb-2">
                                    <MudRadio Class="me-8" T="int?" Value="@type.Id" Color="@GetProjectTypeColor(type)" Dense="true">
                                        @type.Name
                                    </MudRadio>
                                </div>
                            }
                        </MudRadioGroup>
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudDatePicker Date="@(Project.StartDate)"
                        DateChanged="@(e => Project.StartDate = e ?? DateTime.Now)"
                        Label="Start Date"
                        Required="true"
                        RequiredError="Start Date is required"
                        For="@(() => Project.StartDate)" />
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudDatePicker @bind-Date="Project.Installation"
                        Label="Installation"
                        Required="true"
                        RequiredError="Installation Date is required"
                        For="@(() => Project.Installation)" />
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudDatePicker @bind-Date="Project.Sop"
                        Label="SOP"
                        Required="true"
                        RequiredError="SOP Date is required"
                        For="@(() => Project.Sop)" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Disabled="@isProcessing">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@isProcessing">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Project Project { get; set; }  

    private MudForm form = null!;
    private ProjectValidator ProjectValidator = new();
    private bool isProcessing;

    private List<Employee> engineers = new();
    private List<Employee> rmResponsibles = new();
    private List<Company> companies = new();
    private List<ProjectType> projectTypes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();

            projectTypes = await context.ProjectTypes
                .Where(pt => pt.IsActive)
                .OrderBy(pt => pt.Order)
                .ToListAsync();


            // new EmployeePosition { Name = "Engineer" },
            // new EmployeePosition { Name = "R&M" }
            engineers = await context.Employees
                .Where(e => e.IsActive && e.PositionId == 0)
                .OrderBy(e => e.LastName)
                .ThenBy(e => e.FirstName)
                .ToListAsync();

            rmResponsibles = await context.Employees
                .Where(e => e.IsActive && e.PositionId == 1)
                .OrderBy(e => e.LastName)
                .ThenBy(e => e.FirstName)
                .ToListAsync();

            companies = await context.Companies
                .Where(c => c.IsActive)
                .OrderBy(c => c.Name)
                .ToListAsync();

            if (Project is not null)
            {
                var existingProject = await context.Projects
                    .Include(p => p.Engineer)
                    .Include(p => p.Supplier)
                    .Include(p => p.RmTechniker)
                    .Include(p => p.ProjectType)
                    .Include(p => p.Tooltree)
                    .FirstOrDefaultAsync(p => p.Id == Project.Id);

                if (existingProject != null)
                {
                    Project = existingProject;
                }
            }
            else
            {
                
                Project = new Project()
                {
                    EcNumber = string.Empty,
                    ProjectName = string.Empty,
                    StartDate = DateTime.Now,
                    Installation = DateTime.Now.AddDays(1),
                    Sop = DateTime.Now.AddDays(2),
                    EngineerId = 0,
                    RmTechnikerId = 0
                };
                


            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load data: {ex.Message}");
        }
    }

    private Color GetProjectTypeColor(ProjectType type)
    {
        return Enum.TryParse<Color>(type.Color, out var color) ? color : Color.Default;
    }

    private async Task Submit()
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;
            await form.Validate();

            if (!form.IsValid) return;

            using var context = await DbFactory.CreateDbContextAsync();
            await using var transaction = await context.Database.BeginTransactionAsync();

            try
            {
                if (Project.Id == 0)
                {
                    await HandleNewProject(context);
                }
                else
                {
                    await HandleExistingProject(context);
                }

                await transaction.CommitAsync();
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to save project: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task HandleNewProject(ApplicationDbContext context)
    {
        context.Projects.Add(Project);
        await context.SaveChangesAsync();

        var tooltree = new Tooltree
            {
                ProjectId = Project.Id,
                IsDone = false,
                TooltreeDatas = new List<TooltreeData>(),
                TooltreeFiles = new List<TooltreeFile>()
            };

        context.Tooltrees.Add(tooltree);
        await context.SaveChangesAsync();

        Project.TooltreeId = tooltree.Id;
        await context.SaveChangesAsync();
    }

    private async Task HandleExistingProject(ApplicationDbContext context)
    {
        var existingProject = await context.Projects
            .Include(p => p.Tooltree)
            .FirstOrDefaultAsync(p => p.Id == Project.Id);

        if (existingProject == null)
            throw new InvalidOperationException("Project not found");

        if (existingProject.Tooltree == null)
        {
            var tooltree = new Tooltree
                {
                    ProjectId = Project.Id,
                    IsDone = false,
                    TooltreeDatas = new List<TooltreeData>(),
                    TooltreeFiles = new List<TooltreeFile>()
                };
            context.Tooltrees.Add(tooltree);
            await context.SaveChangesAsync();
            Project.TooltreeId = tooltree.Id;
        }
        else
        {
            Project.TooltreeId = existingProject.TooltreeId;
        }

        context.Entry(existingProject).CurrentValues.SetValues(Project);
        await context.SaveChangesAsync();
    }

    private void Cancel() => MudDialog.Cancel();
}
